// <auto-generated />
using System;
using Food_Tracking_API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Food_Tracking_API.Migrations
{
    [DbContext(typeof(FoodTrackingContext))]
    partial class FoodTrackingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Food_Tracking_API.Models.Diary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Diaries");
                });

            modelBuilder.Entity("Food_Tracking_API.Models.DiaryFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiaryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoodGramsQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MealCategory")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DiaryId");

                    b.HasIndex("FoodId");

                    b.ToTable("DiaryFoods");
                });

            modelBuilder.Entity("Food_Tracking_API.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Calories")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("REAL");

                    b.Property<double>("Fats")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Protein")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Calories = 130,
                            Carbohydrates = 28.699999999999999,
                            Fats = 0.29999999999999999,
                            Name = "Cooked Rice (White)",
                            Protein = 2.7000000000000002
                        },
                        new
                        {
                            Id = 2,
                            Calories = 127,
                            Carbohydrates = 22.800000000000001,
                            Fats = 0.5,
                            Name = "Cooked Beans (Black)",
                            Protein = 8.0999999999999996
                        },
                        new
                        {
                            Id = 3,
                            Calories = 165,
                            Carbohydrates = 0.0,
                            Fats = 3.6000000000000001,
                            Name = "Cooked Chicken Breast (Skinless)",
                            Protein = 31.0
                        },
                        new
                        {
                            Id = 4,
                            Calories = 588,
                            Carbohydrates = 20.0,
                            Fats = 50.0,
                            Name = "Pure Peanut Butter (No Sugar, Natural)",
                            Protein = 25.0
                        },
                        new
                        {
                            Id = 5,
                            Calories = 370,
                            Carbohydrates = 8.0,
                            Fats = 6.0,
                            Name = "Integral Medica Whey Protein (Unflavored)",
                            Protein = 75.0
                        },
                        new
                        {
                            Id = 6,
                            Calories = 265,
                            Carbohydrates = 49.0,
                            Fats = 3.5,
                            Name = "Bread (White)",
                            Protein = 9.0
                        },
                        new
                        {
                            Id = 7,
                            Calories = 247,
                            Carbohydrates = 41.0,
                            Fats = 3.5,
                            Name = "Whole Wheat Bread",
                            Protein = 12.0
                        },
                        new
                        {
                            Id = 8,
                            Calories = 131,
                            Carbohydrates = 25.0,
                            Fats = 1.1000000000000001,
                            Name = "Cooked Pasta (Whole Wheat)",
                            Protein = 5.0
                        },
                        new
                        {
                            Id = 9,
                            Calories = 884,
                            Carbohydrates = 0.0,
                            Fats = 100.0,
                            Name = "Olive Oil (Extra Virgin)",
                            Protein = 0.0
                        });
                });

            modelBuilder.Entity("Food_Tracking_API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Food_Tracking_API.Models.Diary", b =>
                {
                    b.HasOne("Food_Tracking_API.Models.User", "User")
                        .WithMany("Diaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Food_Tracking_API.Models.DiaryFood", b =>
                {
                    b.HasOne("Food_Tracking_API.Models.Diary", "Diary")
                        .WithMany("DiaryFoods")
                        .HasForeignKey("DiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Food_Tracking_API.Models.Food", "Food")
                        .WithMany("DiaryFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diary");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Food_Tracking_API.Models.Diary", b =>
                {
                    b.Navigation("DiaryFoods");
                });

            modelBuilder.Entity("Food_Tracking_API.Models.Food", b =>
                {
                    b.Navigation("DiaryFoods");
                });

            modelBuilder.Entity("Food_Tracking_API.Models.User", b =>
                {
                    b.Navigation("Diaries");
                });
#pragma warning restore 612, 618
        }
    }
}
